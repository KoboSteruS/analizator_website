#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.
"""

import os
import sys
import subprocess
import psutil
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))


def check_git_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è."""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Git —Å—Ç–∞—Ç—É—Å–∞...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ uncommitted –∏–∑–º–µ–Ω–µ–Ω–∏—è
        result = subprocess.run(['git', 'status', '--porcelain'], 
                              capture_output=True, text=True)
        if result.stdout.strip():
            print("‚ö†Ô∏è  –ï—Å—Ç—å –Ω–µcommitted –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
            print(result.stdout)
        else:
            print("‚úÖ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —á–∏—Å—Ç–∞—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç
        result = subprocess.run(['git', 'log', '--oneline', '-1'], 
                              capture_output=True, text=True)
        print(f"üìù –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç: {result.stdout.strip()}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ç–∫—É
        result = subprocess.run(['git', 'branch', '--show-current'], 
                              capture_output=True, text=True)
        print(f"üåø –¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: {result.stdout.strip()}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Git: {e}")


def check_gunicorn_processes():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Gunicorn."""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Gunicorn...")
    
    gunicorn_processes = []
    for proc in psutil.process_iter(['pid', 'name', 'cmdline', 'create_time']):
        try:
            if 'gunicorn' in proc.info['name'] or \
               any('gunicorn' in cmd for cmd in proc.info['cmdline']):
                gunicorn_processes.append(proc.info)
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue
    
    if gunicorn_processes:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(gunicorn_processes)} Gunicorn –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:")
        for proc in gunicorn_processes:
            start_time = datetime.fromtimestamp(proc['create_time'])
            print(f"  üìç PID: {proc['pid']}, –∑–∞–ø—É—â–µ–Ω: {start_time.strftime('%Y-%m-%d %H:%M:%S')}")
    else:
        print("‚ùå –ü—Ä–æ—Ü–µ—Å—Å—ã Gunicorn –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")


def check_port_listening():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–æ—Ä—Ç 8000 –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–µ—Ç—Å—è."""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ 8000...")
    
    try:
        result = subprocess.run(['netstat', '-tlnp'], capture_output=True, text=True)
        if ':8000' in result.stdout:
            lines = [line for line in result.stdout.split('\n') if ':8000' in line]
            for line in lines:
                print(f"‚úÖ –ü–æ—Ä—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–µ—Ç—Å—è: {line.strip()}")
        else:
            print("‚ùå –ü–æ—Ä—Ç 8000 –Ω–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–µ—Ç—Å—è!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞: {e}")


def check_app_response():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    try:
        result = subprocess.run(['curl', '-I', 'http://127.0.0.1:8000/'], 
                              capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            if '200 OK' in result.stdout:
                print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—á–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print(f"‚ö†Ô∏è  –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—á–∞–µ—Ç —Å –æ—à–∏–±–∫–æ–π:\n{result.stdout}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {result.stderr}")
    except subprocess.TimeoutExpired:
        print("‚ùå Timeout –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")


def check_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from app import create_app, db
        from app.models import User, Service, Portfolio
        
        app = create_app('production')
        with app.app_context():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
            result = db.session.execute('SELECT 1')
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –°—á–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
            users_count = User.query.count()
            services_count = Service.query.count()
            portfolio_count = Portfolio.query.count()
            
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î:")
            print(f"  üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
            print(f"  üõ†  –£—Å–ª—É–≥: {services_count}")
            print(f"  üìÅ –ü—Ä–æ–µ–∫—Ç–æ–≤ –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ: {portfolio_count}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")


def check_logs():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤."""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤...")
    
    log_files = [
        'logs/error.log',
        'logs/access.log',
        'logs/errors.log',
        'logs/app.log'
    ]
    
    for log_file in log_files:
        if os.path.exists(log_file):
            size = os.path.getsize(log_file)
            mtime = datetime.fromtimestamp(os.path.getmtime(log_file))
            print(f"üìÑ {log_file}: {size} –±–∞–π—Ç, –∏–∑–º–µ–Ω—ë–Ω: {mtime.strftime('%Y-%m-%d %H:%M:%S')}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏
            if 'error' in log_file:
                try:
                    result = subprocess.run(['tail', '-5', log_file], 
                                          capture_output=True, text=True)
                    if result.stdout.strip():
                        print(f"  üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:")
                        for line in result.stdout.strip().split('\n'):
                            print(f"    {line}")
                except Exception:
                    pass
        else:
            print(f"‚ùå {log_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    print("üöÄ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è")
    print("=" * 50)
    
    check_git_status()
    check_gunicorn_processes()
    check_port_listening()
    check_app_response()
    check_database()
    check_logs()
    
    print("\n" + "=" * 50)
    print("‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


if __name__ == '__main__':
    main() 