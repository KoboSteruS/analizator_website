#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.
–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.
"""

import os
import sys
import subprocess
import signal
import time
from pathlib import Path

def run_command(cmd, description="", check=True):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    print(f"üîÑ {description or cmd}")
    try:
        result = subprocess.run(cmd, shell=True, check=check, 
                               capture_output=True, text=True)
        if result.stdout:
            print(f"‚úÖ {result.stdout.strip()}")
        return result.returncode == 0
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
        if e.stderr:
            print(f"   Stderr: {e.stderr.strip()}")
        return False

def kill_gunicorn():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ gunicorn."""
    print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ gunicorn...")
    
    # –ú—è–≥–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
    run_command("pkill -TERM -f 'gunicorn.*run:app'", 
                "–û—Ç–ø—Ä–∞–≤–∫–∞ SIGTERM gunicorn –ø—Ä–æ—Ü–µ—Å—Å–∞–º", check=False)
    
    time.sleep(3)
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    run_command("pkill -KILL -f 'gunicorn.*run:app'", 
                "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ gunicorn", check=False)
    
    time.sleep(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
    result = subprocess.run("pgrep -f 'gunicorn.*run:app'", 
                           shell=True, capture_output=True)
    if result.returncode == 0:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã gunicorn –≤—Å–µ –µ—â–µ –∑–∞–ø—É—â–µ–Ω—ã")
        return False
    else:
        print("‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã gunicorn –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True

def update_code():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ git."""
    print("üì• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º git —Å—Ç–∞—Ç—É—Å
    result = subprocess.run("git status --porcelain", 
                           shell=True, capture_output=True, text=True)
    if result.stdout.strip():
        print("‚ö†Ô∏è –ï—Å—Ç—å –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
        print(result.stdout)
        
        response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ").lower()
        if response != 'y':
            print("‚ùå –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return False
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if not run_command("git pull origin main", "–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–∑ git"):
        return False
    
    return True

def clear_cache():
    """–û—á–∏—Å—Ç–∫–∞ Python –∫—ç—à–∞."""
    print("üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞...")
    
    run_command("find . -name '*.pyc' -delete", 
                "–£–¥–∞–ª–µ–Ω–∏–µ .pyc —Ñ–∞–π–ª–æ–≤", check=False)
    run_command("find . -name '__pycache__' -type d -exec rm -rf {} +", 
                "–£–¥–∞–ª–µ–Ω–∏–µ __pycache__ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π", check=False)
    
    print("‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω")
    return True

def run_diagnostics():
    """–ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
    print("ü©∫ –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏...")
    
    if not Path("diagnose_gunicorn.py").exists():
        print("‚ö†Ô∏è –§–∞–π–ª diagnose_gunicorn.py –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É")
        return True
    
    result = subprocess.run("python3 diagnose_gunicorn.py", 
                           shell=True, capture_output=True, text=True)
    
    print(result.stdout)
    if result.stderr:
        print(f"–û—à–∏–±–∫–∏: {result.stderr}")
    
    if result.returncode != 0:
        print("‚ùå –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–∫–∞–∑–∞–ª–∞ –ø—Ä–æ–±–ª–µ–º—ã")
        response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ? (y/N): ").lower()
        return response == 'y'
    
    print("‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
    return True

def start_gunicorn():
    """–ó–∞–ø—É—Å–∫ gunicorn."""
    print("üöÄ –ó–∞–ø—É—Å–∫ gunicorn...")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env = os.environ.copy()
    env['FLASK_ENV'] = 'production'
    
    # –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞
    cmd = [
        "gunicorn",
        "--bind", "127.0.0.1:8000",
        "--workers", "2",
        "--timeout", "30",
        "--preload",
        "--daemon",
        "--access-logfile", "logs/access.log",
        "--error-logfile", "logs/error.log",
        "--log-level", "info",
        "run_safe:app"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –≤–µ—Ä—Å–∏—é
    ]
    
    try:
        subprocess.run(cmd, check=True, env=env)
        print("‚úÖ Gunicorn –∑–∞–ø—É—â–µ–Ω")
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω
        time.sleep(2)
        result = subprocess.run("pgrep -f 'gunicorn.*run_safe:app'", 
                               shell=True, capture_output=True)
        if result.returncode == 0:
            print("‚úÖ Gunicorn –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print("‚ùå Gunicorn –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ gunicorn: {e}")
        return False

def check_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏...")
    
    time.sleep(3)  # –î–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
    
    try:
        result = subprocess.run("curl -s -o /dev/null -w '%{http_code}' http://127.0.0.1:8000/", 
                               shell=True, capture_output=True, text=True, timeout=10)
        
        status_code = result.stdout.strip()
        if status_code == "200":
            print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—á–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print(f"‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–µ—Ä–Ω—É–ª–æ –∫–æ–¥: {status_code}")
            return False
            
    except subprocess.TimeoutExpired:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        return False

def show_status():
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    print("\n" + "="*50)
    print("üìä –°–¢–ê–¢–£–° –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–Ø")
    print("="*50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
    result = subprocess.run("ps aux | grep -E 'gunicorn.*run_safe:app' | grep -v grep", 
                           shell=True, capture_output=True, text=True)
    if result.stdout:
        print("üü¢ Gunicorn –ø—Ä–æ—Ü–µ—Å—Å—ã:")
        print(result.stdout)
    else:
        print("üî¥ Gunicorn –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç
    result = subprocess.run("netstat -tlnp 2>/dev/null | grep :8000 || ss -tlnp | grep :8000", 
                           shell=True, capture_output=True, text=True)
    if result.stdout:
        print("üü¢ –ü–æ—Ä—Ç 8000 —Å–ª—É—à–∞–µ—Ç—Å—è:")
        print(result.stdout.strip())
    else:
        print("üî¥ –ü–æ—Ä—Ç 8000 –Ω–µ —Å–ª—É—à–∞–µ—Ç—Å—è")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏
    if Path("logs/error.log").exists():
        print("\nüìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ error.log:")
        run_command("tail -5 logs/error.log", check=False)
    
    print("="*50)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è."""
    print("üöÄ –ë–´–°–¢–†–û–ï –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø")
    print("="*50)
    
    steps = [
        ("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ gunicorn", kill_gunicorn),
        ("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞", update_code),
        ("–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞", clear_cache),
        ("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", run_diagnostics),
        ("–ó–∞–ø—É—Å–∫ gunicorn", start_gunicorn),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏", check_health)
    ]
    
    for step_name, step_func in steps:
        print(f"\nüîÑ {step_name}...")
        if not step_func():
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ: {step_name}")
            show_status()
            return False
    
    print("\n‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    show_status()
    
    print("\nüéØ –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    print("  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤: tail -f logs/error.log")
    print("  –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: ps aux | grep gunicorn")
    print("  –¢–µ—Å—Ç —Å–∞–π—Ç–∞: curl -I http://127.0.0.1:8000/")
    
    return True

if __name__ == '__main__':
    try:
        if len(sys.argv) > 1 and sys.argv[1] == '--kill-only':
            kill_gunicorn()
        else:
            main()
    except KeyboardInterrupt:
        print("\nüõë –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1) 